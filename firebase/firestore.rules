rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Base rules
    match /{document=**} {
      allow read, write: if false; // Default deny all
    }
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isConnectionParticipant(connectionId) {
      let connection = get(/databases/$(database)/documents/connections/$(connectionId)).data;
      return request.auth.uid in connection.users;
    }
    
    function isConversationParticipant(conversationId) {
      let conversation = get(/databases/$(database)/documents/conversations/$(conversationId)).data;
      return request.auth.uid == conversation.user1Id || request.auth.uid == conversation.user2Id;
    }
    
    // User rules
    match /users/{userId} {
      // Users can read their own data, public profiles, or profiles they're connected with
      allow read: if isSignedIn() && (
        isOwner(userId) || 
        resource.data.profileVisibility == 'public' ||
        (resource.data.profileVisibility == 'connections' && hasConnection(userId))
      );
      
      // Users can only write their own data
      allow write: if isSignedIn() && isOwner(userId);
      
      // Function to check if users are connected
      function hasConnection(otherUserId) {
        let connectionId = getConnectionId(request.auth.uid, otherUserId);
        let connection = get(/databases/$(database)/documents/connections/$(connectionId)).data;
        return connection != null && connection.status == 'accepted';
      }
      
      // Generate a consistent connection ID between two users
      function getConnectionId(uid1, uid2) {
        return uid1 < uid2 ? uid1 + '_' + uid2 : uid2 + '_' + uid1;
      }
    }
    
    // Connection rules
    match /connections/{connectionId} {
      // Users can read connections they are part of
      allow read: if isSignedIn() && isConnectionParticipant(connectionId);
      
      // Any signed-in user can create a connection request
      allow create: if isSignedIn() && 
                     request.resource.data.users.hasAll([request.auth.uid, request.resource.data.requesteeId]) &&
                     request.resource.data.requesterId == request.auth.uid &&
                     request.resource.data.status == 'pending';
                     
      // Users can update or delete connections they are part of
      allow update, delete: if isSignedIn() && isConnectionParticipant(connectionId);
    }
    
    // Conversation rules
    match /conversations/{conversationId} {
      // Users can read and write conversations they are part of
      allow read, write: if isSignedIn() && isConversationParticipant(conversationId);
      
      // Message rules for subcollections
      match /messages/{messageId} {
        allow read, write: if isSignedIn() && isConversationParticipant(conversationId);
      }
    }
    
    // Exploration rules
    match /explorations/{explorationId} {
      // Users can read and manage their explorations
      allow read, write: if isSignedIn() && (
        resource.data.participants.hasAny([request.auth.uid]) ||
        request.resource.data.participants.hasAny([request.auth.uid])
      );
    }
    
    // Exploration Types rules (templates)
    match /explorationTypes/{typeId} {
      // All users can read exploration types
      allow read: if isSignedIn();
      
      // Only admins can write (managed through Firebase Functions)
      allow write: if false;
      
      // Stages subcollection
      match /stages/{stageId} {
        allow read: if isSignedIn();
        allow write: if false;
      }
    }
  }
}